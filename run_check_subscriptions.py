import os
import django
import asyncio
import logging
import gc  # –°–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞
import psutil  # –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏
from datetime import datetime, timedelta

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–µ—Å—Å–∏–∏ –≤ config.py
os.environ["SERVICE_TYPE"] = "checker"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
django.setup()

from bot.payment_sender import check_subscriptions
from bot.services.chat_member_updater import update_all_channels_users
from bot.config import bot_manager

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(module)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('subscription_checker.log', mode='a')
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ –∑–∞–¥–µ—Ä–∂–µ–∫
CHECK_INTERVAL_SECONDS = 30 * 60  # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (–≤–º–µ—Å—Ç–æ 15)
SCAN_INTERVAL_SECONDS = 6 * 60 * 60  # –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ 
last_check_time = None
last_scan_time = None

def log_memory_usage():
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
    process = psutil.Process(os.getpid())
    mem_info = process.memory_info()
    logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {mem_info.rss / 1024 / 1024:.2f} –ú–ë")

async def init_bots():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫...")
        # –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        await asyncio.sleep(15)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await bot_manager.get_userbot()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        if bot_manager.bot:
            await bot_manager.bot.get_me()
            logger.info("‚úÖ Aiogram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω")
            
        logger.info("‚úÖ –ë–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        # –§–æ—Ä—Å–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É –º—É—Å–æ—Ä–∞
        gc.collect()
        log_memory_usage()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤: {e}", exc_info=True)
        raise

async def main():
    global last_check_time
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
        await init_bots()
        
        while True:
            try:
                current_time = datetime.now()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                if last_check_time and (current_time - last_check_time).total_seconds() < CHECK_INTERVAL_SECONDS:
                    await asyncio.sleep(60)  # –°–ø–∏–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    continue
                    
                logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫...")
                await check_subscriptions(logger=logger)
                logger.info("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")

                logger.info("‚ñ∂Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤...")
                await update_all_channels_users()
                logger.info("‚úÖ –ö–∞–Ω–∞–ª—ã –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.")
                
                last_check_time = current_time
                logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL_SECONDS/60} –º–∏–Ω—É—Ç")
                
            except Exception as e:
                logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}", exc_info=True)
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            else:
                await asyncio.sleep(60)  # –°–ø–∏–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫")
        await bot_manager.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}", exc_info=True)
