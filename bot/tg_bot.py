import os
import sys

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–µ—Å—Å–∏–∏ –≤ config.py
os.environ["SERVICE_TYPE"] = "bot"

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
os.environ.update({'DJANGO_ALLOW_ASYNC_UNSAFE': "true"})

import django
django.setup()

import asyncio
from aiogram import Dispatcher
from commands import start_command, payment_command, chat_members_command
from bot.config import bot_manager, bot

import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot_logs.log', mode='a')  # –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª 'bot_logs.log'
    ]
)

logger = logging.getLogger("TelegramBot")

async def init_bots():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pyrogram Client...")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —é–∑–µ—Ä–±–æ—Ç–∞ —Å —Å–µ—Å—Å–∏–µ–π –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        await bot_manager.get_userbot()
        logger.info("‚úÖ –ë–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤: {e}", exc_info=True)
        raise

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ Telegram –±–æ—Ç–∞")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
        await init_bots()
        
        dp = Dispatcher()
        
        dp.include_routers(
            start_command.router,
            payment_command.router,
            # chat_members_command.router,
        )
        
        logger.info("‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥")
        
        await asyncio.gather(
            bot.delete_webhook(drop_pending_updates=True),
            dp.start_polling(bot, skip_updates=False),
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
        await bot_manager.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}", exc_info=True)