# from aiogram import Router
# from aiogram.types import Message
# from aiogram.filters import Command
# from services.get_chat_members_service import get_chat_members
# from services.channels_service import get_all_channels
# from users.models import Channel

# import logging
# logger = logging.getLogger(__name__)

# router = Router()

# @router.message(Command('all_members'))
# async def cmd_all_members(message: Message):
#     channels = await get_all_channels()

#     if not channels:
#         await message.reply("‚ùóÔ∏è–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
#         return

#     for channel in channels:
#         await message.reply(f"üì° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª: {channel.name} ({channel.channel_id})")
#         try:
#             added_users, updated_subs = await get_chat_members(channel.channel_id)
#             await message.reply(
#                 f"‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è {channel.name}!\n"
#                 f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {added_users}\n"
#                 f"üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {updated_subs}"
#             )
#         except Exception as e:
#             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ {channel.channel_id}: {e}")
#             await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ {channel.name}: {e}")
