import os
import django
import json
import logging
from http.server import HTTPServer, BaseHTTPRequestHandler

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–µ—Å—Å–∏–∏ –≤ config.py
os.environ["SERVICE_TYPE"] = "http"

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(module)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('http_server.log', mode='a')
    ]
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã Django –º–æ–¥–µ–ª–µ–π –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
from posting.models import PostingMessage
from bot.post_sender import send_posting

class PostingHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å: {self.path}")
        
        if self.path.rstrip('/') == '/send_posting':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            try:
                logger.info(f"–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏: {data}")
                send_posting(data)
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'status': 'success'}).encode())
                logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'error': str(e)}).encode())
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É—Ç—å: {self.path}")
            self.send_response(404)
            self.end_headers()
            
    def log_message(self, format, *args):
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTPServer
        logger.info("%s - - [%s] %s" %
                     (self.address_string(),
                      self.log_date_time_string(),
                      format%args))

def run_server():
    port = int(os.getenv('BOT_HTTP_PORT', 8000))
    server = HTTPServer(('0.0.0.0', port), PostingHandler)
    logger.info(f"üöÄ Starting HTTP server on port {port}")
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        logger.info("HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ HTTP —Å–µ—Ä–≤–µ—Ä–µ: {e}", exc_info=True)
    finally:
        server.server_close()
        logger.info("HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")

if __name__ == '__main__':
    run_server() 